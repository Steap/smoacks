"""{{ mixedName }}.py - Module containing the {{ mixedName }} class"""
import uuid
import datetime
from sqlalchemy import Column, DateTime, JSON, String, text
from sqlalchemy.dialects.mysql import BINARY

from .base import Base

class {{ genprefix}}{{ mixedName }}(Base):
    """Data model object representing a {{ mixedName }}"""
    __tablename__ = '{{ mixedName }}'
    __table_args__ = {'mysql_charset':'utf8'}
    {{ snakeName }}_id = Column(BINARY(16), primary_key=True)
    {% for dmField in dmFields %}{{ dmField }}
    {% endfor %}
    record_created = Column(DateTime,
                            server_default=text('CURRENT_TIMESTAMP'))
    record_updated = Column(DateTime,
                            server_default=text('CURRENT_TIMESTAMP'),
                            onupdate=datetime.datetime.now)

    def __init__(self, **kwargs):
        """Initializes the ID for newly constructed objects"""
        super({{ genprefix}}{{ mixedName }}, self).__init__(**kwargs)
        self.{{ snakeName }}_id = uuid.uuid4().bytes

    def get_uuid(self):
        """Returns the text version of the UUID, the binary version is stored in the database"""
        return str(uuid.UUID(bytes=self.{{ snakeName }}_id))

    def dump(self, deep=False):
        """Returns dictionary of fields and values"""
        ret = {}
        for key, value in vars(self).items():
            if key == '{{ snakeName }}_id':
                ret[key] = self.get_uuid()
            elif not key.startswith('_'):
                ret[key] = value
        return ret
